// <auto-generated>
// Copyright (c) freee K.K. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license
// information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
//
// </auto-generated>

namespace Freee.Accounting
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Users.
    /// </summary>
    public static partial class UsersExtensions
    {
            /// <summary>
            /// ログインユーザ情報の取得
            /// </summary>
            /// <remarks>
            /// ユーザの情報を取得する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companies'>
            /// 取得情報にユーザが所属する事業所一覧を含める
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsersMeResponse> GetMeAsync(this IUsers operations, bool? companies = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMeWithHttpMessagesAsync(companies, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// ログインユーザの権限の取得
            /// </summary>
            /// <remarks>
            /// ユーザの権限情報を取得する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companyId'>
            /// 事業所ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsersCapabilitiesResponse> GetCapabilitiesAsync(this IUsers operations, int companyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCapabilitiesWithHttpMessagesAsync(companyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
