// <auto-generated>
// Copyright (c) freee K.K. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license
// information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
//
// </auto-generated>

namespace Freee.Accounting
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// TrialBalance operations.
    /// </summary>
    public partial class TrialBalance : IServiceOperations<AccountingClient>, ITrialBalance
    {
        /// <summary>
        /// Initializes a new instance of the TrialBalance class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public TrialBalance(AccountingClient client)
        {
            if (client == null)
            {
                throw new System.ArgumentNullException("client");
            }
            Client = client;
        }

        /// <summary>
        /// Gets a reference to the AccountingClient
        /// </summary>
        public AccountingClient Client { get; private set; }

        /// <summary>
        /// 貸借対照表の取得
        /// </summary>
        /// <remarks>
        /// 指定した事業所の貸借対照表を取得する
        /// </remarks>
        /// <param name='companyId'>
        /// 事業所ID
        /// </param>
        /// <param name='fiscalYear'>
        /// 会計年度
        /// </param>
        /// <param name='startMonth'>
        /// 発生月で絞込：開始会計月(mm)
        /// </param>
        /// <param name='endMonth'>
        /// 発生月で絞込：終了会計月(mm)
        /// </param>
        /// <param name='startDate'>
        /// 発生日で絞込：開始日(yyyy-mm-dd)
        /// </param>
        /// <param name='endDate'>
        /// 発生日で絞込：終了日(yyyy-mm-dd)
        /// </param>
        /// <param name='accountItemDisplayType'>
        /// 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include:
        /// 'account_item', 'group'
        /// </param>
        /// <param name='breakdownDisplayType'>
        /// 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item）
        /// ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include:
        /// 'partner', 'item', 'account_item'
        /// </param>
        /// <param name='partnerId'>
        /// 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
        /// </param>
        /// <param name='partnerCode'>
        /// 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
        /// </param>
        /// <param name='itemId'>
        /// 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
        /// </param>
        /// <param name='adjustment'>
        /// 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include:
        /// 'only', 'without'
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<TrialBsResponse>> GetTrialBsWithHttpMessagesAsync(int companyId, int? fiscalYear = default(int?), int? startMonth = default(int?), int? endMonth = default(int?), string startDate = default(string), string endDate = default(string), string accountItemDisplayType = default(string), string breakdownDisplayType = default(string), int? partnerId = default(int?), string partnerCode = default(string), int? itemId = default(int?), string adjustment = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("companyId", companyId);
                tracingParameters.Add("fiscalYear", fiscalYear);
                tracingParameters.Add("startMonth", startMonth);
                tracingParameters.Add("endMonth", endMonth);
                tracingParameters.Add("startDate", startDate);
                tracingParameters.Add("endDate", endDate);
                tracingParameters.Add("accountItemDisplayType", accountItemDisplayType);
                tracingParameters.Add("breakdownDisplayType", breakdownDisplayType);
                tracingParameters.Add("partnerId", partnerId);
                tracingParameters.Add("partnerCode", partnerCode);
                tracingParameters.Add("itemId", itemId);
                tracingParameters.Add("adjustment", adjustment);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTrialBs", tracingParameters);
            }
            // Construct URL
            var _baseUrl = Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "reports/trial_bs").ToString();
            List<string> _queryParameters = new List<string>();
            _queryParameters.Add(string.Format("company_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(companyId, Client.SerializationSettings).Trim('"'))));
            if (fiscalYear != null)
            {
                _queryParameters.Add(string.Format("fiscal_year={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(fiscalYear, Client.SerializationSettings).Trim('"'))));
            }
            if (startMonth != null)
            {
                _queryParameters.Add(string.Format("start_month={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(startMonth, Client.SerializationSettings).Trim('"'))));
            }
            if (endMonth != null)
            {
                _queryParameters.Add(string.Format("end_month={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(endMonth, Client.SerializationSettings).Trim('"'))));
            }
            if (startDate != null)
            {
                _queryParameters.Add(string.Format("start_date={0}", System.Uri.EscapeDataString(startDate)));
            }
            if (endDate != null)
            {
                _queryParameters.Add(string.Format("end_date={0}", System.Uri.EscapeDataString(endDate)));
            }
            if (accountItemDisplayType != null)
            {
                _queryParameters.Add(string.Format("account_item_display_type={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(accountItemDisplayType, Client.SerializationSettings).Trim('"'))));
            }
            if (breakdownDisplayType != null)
            {
                _queryParameters.Add(string.Format("breakdown_display_type={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(breakdownDisplayType, Client.SerializationSettings).Trim('"'))));
            }
            if (partnerId != null)
            {
                _queryParameters.Add(string.Format("partner_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(partnerId, Client.SerializationSettings).Trim('"'))));
            }
            if (partnerCode != null)
            {
                _queryParameters.Add(string.Format("partner_code={0}", System.Uri.EscapeDataString(partnerCode)));
            }
            if (itemId != null)
            {
                _queryParameters.Add(string.Format("item_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(itemId, Client.SerializationSettings).Trim('"'))));
            }
            if (adjustment != null)
            {
                _queryParameters.Add(string.Format("adjustment={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(adjustment, Client.SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<TrialBsResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<TrialBsResponse>(_responseContent, Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// 貸借対照表(前年比較)の取得
        /// </summary>
        /// <remarks>
        /// 指定した事業所の貸借対照表(前年比較)を取得する
        /// </remarks>
        /// <param name='companyId'>
        /// 事業所ID
        /// </param>
        /// <param name='fiscalYear'>
        /// 会計年度
        /// </param>
        /// <param name='startMonth'>
        /// 発生月で絞込：開始会計月(mm)
        /// </param>
        /// <param name='endMonth'>
        /// 発生月で絞込：終了会計月(mm)
        /// </param>
        /// <param name='startDate'>
        /// 発生日で絞込：開始日(yyyy-mm-dd)
        /// </param>
        /// <param name='endDate'>
        /// 発生日で絞込：終了日(yyyy-mm-dd)
        /// </param>
        /// <param name='accountItemDisplayType'>
        /// 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include:
        /// 'account_item', 'group'
        /// </param>
        /// <param name='breakdownDisplayType'>
        /// 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item）
        /// ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include:
        /// 'partner', 'item', 'account_item'
        /// </param>
        /// <param name='partnerId'>
        /// 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
        /// </param>
        /// <param name='partnerCode'>
        /// 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
        /// </param>
        /// <param name='itemId'>
        /// 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
        /// </param>
        /// <param name='adjustment'>
        /// 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include:
        /// 'only', 'without'
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<TrialBsTwoYearsResponse>> GetTrialBsTwoYearsWithHttpMessagesAsync(int companyId, int? fiscalYear = default(int?), int? startMonth = default(int?), int? endMonth = default(int?), string startDate = default(string), string endDate = default(string), string accountItemDisplayType = default(string), string breakdownDisplayType = default(string), int? partnerId = default(int?), string partnerCode = default(string), int? itemId = default(int?), string adjustment = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("companyId", companyId);
                tracingParameters.Add("fiscalYear", fiscalYear);
                tracingParameters.Add("startMonth", startMonth);
                tracingParameters.Add("endMonth", endMonth);
                tracingParameters.Add("startDate", startDate);
                tracingParameters.Add("endDate", endDate);
                tracingParameters.Add("accountItemDisplayType", accountItemDisplayType);
                tracingParameters.Add("breakdownDisplayType", breakdownDisplayType);
                tracingParameters.Add("partnerId", partnerId);
                tracingParameters.Add("partnerCode", partnerCode);
                tracingParameters.Add("itemId", itemId);
                tracingParameters.Add("adjustment", adjustment);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTrialBsTwoYears", tracingParameters);
            }
            // Construct URL
            var _baseUrl = Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "reports/trial_bs_two_years").ToString();
            List<string> _queryParameters = new List<string>();
            _queryParameters.Add(string.Format("company_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(companyId, Client.SerializationSettings).Trim('"'))));
            if (fiscalYear != null)
            {
                _queryParameters.Add(string.Format("fiscal_year={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(fiscalYear, Client.SerializationSettings).Trim('"'))));
            }
            if (startMonth != null)
            {
                _queryParameters.Add(string.Format("start_month={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(startMonth, Client.SerializationSettings).Trim('"'))));
            }
            if (endMonth != null)
            {
                _queryParameters.Add(string.Format("end_month={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(endMonth, Client.SerializationSettings).Trim('"'))));
            }
            if (startDate != null)
            {
                _queryParameters.Add(string.Format("start_date={0}", System.Uri.EscapeDataString(startDate)));
            }
            if (endDate != null)
            {
                _queryParameters.Add(string.Format("end_date={0}", System.Uri.EscapeDataString(endDate)));
            }
            if (accountItemDisplayType != null)
            {
                _queryParameters.Add(string.Format("account_item_display_type={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(accountItemDisplayType, Client.SerializationSettings).Trim('"'))));
            }
            if (breakdownDisplayType != null)
            {
                _queryParameters.Add(string.Format("breakdown_display_type={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(breakdownDisplayType, Client.SerializationSettings).Trim('"'))));
            }
            if (partnerId != null)
            {
                _queryParameters.Add(string.Format("partner_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(partnerId, Client.SerializationSettings).Trim('"'))));
            }
            if (partnerCode != null)
            {
                _queryParameters.Add(string.Format("partner_code={0}", System.Uri.EscapeDataString(partnerCode)));
            }
            if (itemId != null)
            {
                _queryParameters.Add(string.Format("item_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(itemId, Client.SerializationSettings).Trim('"'))));
            }
            if (adjustment != null)
            {
                _queryParameters.Add(string.Format("adjustment={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(adjustment, Client.SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<TrialBsTwoYearsResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<TrialBsTwoYearsResponse>(_responseContent, Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// 貸借対照表(３期間比較)の取得
        /// </summary>
        /// <remarks>
        /// 指定した事業所の貸借対照表(３期間比較)を取得する
        /// </remarks>
        /// <param name='companyId'>
        /// 事業所ID
        /// </param>
        /// <param name='fiscalYear'>
        /// 会計年度
        /// </param>
        /// <param name='startMonth'>
        /// 発生月で絞込：開始会計月(mm)
        /// </param>
        /// <param name='endMonth'>
        /// 発生月で絞込：終了会計月(mm)
        /// </param>
        /// <param name='startDate'>
        /// 発生日で絞込：開始日(yyyy-mm-dd)
        /// </param>
        /// <param name='endDate'>
        /// 発生日で絞込：終了日(yyyy-mm-dd)
        /// </param>
        /// <param name='accountItemDisplayType'>
        /// 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include:
        /// 'account_item', 'group'
        /// </param>
        /// <param name='breakdownDisplayType'>
        /// 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item）
        /// ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include:
        /// 'partner', 'item', 'account_item'
        /// </param>
        /// <param name='partnerId'>
        /// 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
        /// </param>
        /// <param name='partnerCode'>
        /// 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
        /// </param>
        /// <param name='itemId'>
        /// 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
        /// </param>
        /// <param name='adjustment'>
        /// 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include:
        /// 'only', 'without'
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<TrialBsThreeYearsResponse>> GetTrialBsThreeYearsWithHttpMessagesAsync(int companyId, int? fiscalYear = default(int?), int? startMonth = default(int?), int? endMonth = default(int?), string startDate = default(string), string endDate = default(string), string accountItemDisplayType = default(string), string breakdownDisplayType = default(string), int? partnerId = default(int?), string partnerCode = default(string), int? itemId = default(int?), string adjustment = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("companyId", companyId);
                tracingParameters.Add("fiscalYear", fiscalYear);
                tracingParameters.Add("startMonth", startMonth);
                tracingParameters.Add("endMonth", endMonth);
                tracingParameters.Add("startDate", startDate);
                tracingParameters.Add("endDate", endDate);
                tracingParameters.Add("accountItemDisplayType", accountItemDisplayType);
                tracingParameters.Add("breakdownDisplayType", breakdownDisplayType);
                tracingParameters.Add("partnerId", partnerId);
                tracingParameters.Add("partnerCode", partnerCode);
                tracingParameters.Add("itemId", itemId);
                tracingParameters.Add("adjustment", adjustment);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTrialBsThreeYears", tracingParameters);
            }
            // Construct URL
            var _baseUrl = Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "reports/trial_bs_three_years").ToString();
            List<string> _queryParameters = new List<string>();
            _queryParameters.Add(string.Format("company_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(companyId, Client.SerializationSettings).Trim('"'))));
            if (fiscalYear != null)
            {
                _queryParameters.Add(string.Format("fiscal_year={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(fiscalYear, Client.SerializationSettings).Trim('"'))));
            }
            if (startMonth != null)
            {
                _queryParameters.Add(string.Format("start_month={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(startMonth, Client.SerializationSettings).Trim('"'))));
            }
            if (endMonth != null)
            {
                _queryParameters.Add(string.Format("end_month={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(endMonth, Client.SerializationSettings).Trim('"'))));
            }
            if (startDate != null)
            {
                _queryParameters.Add(string.Format("start_date={0}", System.Uri.EscapeDataString(startDate)));
            }
            if (endDate != null)
            {
                _queryParameters.Add(string.Format("end_date={0}", System.Uri.EscapeDataString(endDate)));
            }
            if (accountItemDisplayType != null)
            {
                _queryParameters.Add(string.Format("account_item_display_type={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(accountItemDisplayType, Client.SerializationSettings).Trim('"'))));
            }
            if (breakdownDisplayType != null)
            {
                _queryParameters.Add(string.Format("breakdown_display_type={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(breakdownDisplayType, Client.SerializationSettings).Trim('"'))));
            }
            if (partnerId != null)
            {
                _queryParameters.Add(string.Format("partner_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(partnerId, Client.SerializationSettings).Trim('"'))));
            }
            if (partnerCode != null)
            {
                _queryParameters.Add(string.Format("partner_code={0}", System.Uri.EscapeDataString(partnerCode)));
            }
            if (itemId != null)
            {
                _queryParameters.Add(string.Format("item_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(itemId, Client.SerializationSettings).Trim('"'))));
            }
            if (adjustment != null)
            {
                _queryParameters.Add(string.Format("adjustment={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(adjustment, Client.SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<TrialBsThreeYearsResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<TrialBsThreeYearsResponse>(_responseContent, Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// 損益計算書の取得
        /// </summary>
        /// <remarks>
        /// 指定した事業所の損益計算書を取得する
        /// </remarks>
        /// <param name='companyId'>
        /// 事業所ID
        /// </param>
        /// <param name='fiscalYear'>
        /// 会計年度
        /// </param>
        /// <param name='startMonth'>
        /// 発生月で絞込：開始会計月(mm)
        /// </param>
        /// <param name='endMonth'>
        /// 発生月で絞込：終了会計月(mm)
        /// </param>
        /// <param name='startDate'>
        /// 発生日で絞込：開始日(yyyy-mm-dd)
        /// </param>
        /// <param name='endDate'>
        /// 発生日で絞込：終了日(yyyy-mm-dd)
        /// </param>
        /// <param name='accountItemDisplayType'>
        /// 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include:
        /// 'account_item', 'group'
        /// </param>
        /// <param name='breakdownDisplayType'>
        /// 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item）
        /// ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include:
        /// 'partner', 'item', 'section', 'account_item'
        /// </param>
        /// <param name='partnerId'>
        /// 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
        /// </param>
        /// <param name='partnerCode'>
        /// 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
        /// </param>
        /// <param name='itemId'>
        /// 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
        /// </param>
        /// <param name='sectionId'>
        /// 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
        /// </param>
        /// <param name='adjustment'>
        /// 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include:
        /// 'only', 'without'
        /// </param>
        /// <param name='costAllocation'>
        /// 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only',
        /// 'not_include'
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<TrialPlResponse>> GetTrialPlWithHttpMessagesAsync(int companyId, int? fiscalYear = default(int?), int? startMonth = default(int?), int? endMonth = default(int?), string startDate = default(string), string endDate = default(string), string accountItemDisplayType = default(string), string breakdownDisplayType = default(string), int? partnerId = default(int?), string partnerCode = default(string), int? itemId = default(int?), int? sectionId = default(int?), string adjustment = default(string), string costAllocation = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("companyId", companyId);
                tracingParameters.Add("fiscalYear", fiscalYear);
                tracingParameters.Add("startMonth", startMonth);
                tracingParameters.Add("endMonth", endMonth);
                tracingParameters.Add("startDate", startDate);
                tracingParameters.Add("endDate", endDate);
                tracingParameters.Add("accountItemDisplayType", accountItemDisplayType);
                tracingParameters.Add("breakdownDisplayType", breakdownDisplayType);
                tracingParameters.Add("partnerId", partnerId);
                tracingParameters.Add("partnerCode", partnerCode);
                tracingParameters.Add("itemId", itemId);
                tracingParameters.Add("sectionId", sectionId);
                tracingParameters.Add("adjustment", adjustment);
                tracingParameters.Add("costAllocation", costAllocation);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTrialPl", tracingParameters);
            }
            // Construct URL
            var _baseUrl = Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "reports/trial_pl").ToString();
            List<string> _queryParameters = new List<string>();
            _queryParameters.Add(string.Format("company_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(companyId, Client.SerializationSettings).Trim('"'))));
            if (fiscalYear != null)
            {
                _queryParameters.Add(string.Format("fiscal_year={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(fiscalYear, Client.SerializationSettings).Trim('"'))));
            }
            if (startMonth != null)
            {
                _queryParameters.Add(string.Format("start_month={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(startMonth, Client.SerializationSettings).Trim('"'))));
            }
            if (endMonth != null)
            {
                _queryParameters.Add(string.Format("end_month={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(endMonth, Client.SerializationSettings).Trim('"'))));
            }
            if (startDate != null)
            {
                _queryParameters.Add(string.Format("start_date={0}", System.Uri.EscapeDataString(startDate)));
            }
            if (endDate != null)
            {
                _queryParameters.Add(string.Format("end_date={0}", System.Uri.EscapeDataString(endDate)));
            }
            if (accountItemDisplayType != null)
            {
                _queryParameters.Add(string.Format("account_item_display_type={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(accountItemDisplayType, Client.SerializationSettings).Trim('"'))));
            }
            if (breakdownDisplayType != null)
            {
                _queryParameters.Add(string.Format("breakdown_display_type={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(breakdownDisplayType, Client.SerializationSettings).Trim('"'))));
            }
            if (partnerId != null)
            {
                _queryParameters.Add(string.Format("partner_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(partnerId, Client.SerializationSettings).Trim('"'))));
            }
            if (partnerCode != null)
            {
                _queryParameters.Add(string.Format("partner_code={0}", System.Uri.EscapeDataString(partnerCode)));
            }
            if (itemId != null)
            {
                _queryParameters.Add(string.Format("item_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(itemId, Client.SerializationSettings).Trim('"'))));
            }
            if (sectionId != null)
            {
                _queryParameters.Add(string.Format("section_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(sectionId, Client.SerializationSettings).Trim('"'))));
            }
            if (adjustment != null)
            {
                _queryParameters.Add(string.Format("adjustment={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(adjustment, Client.SerializationSettings).Trim('"'))));
            }
            if (costAllocation != null)
            {
                _queryParameters.Add(string.Format("cost_allocation={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(costAllocation, Client.SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<TrialPlResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<TrialPlResponse>(_responseContent, Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// 損益計算書(前年比較)の取得
        /// </summary>
        /// <remarks>
        /// 指定した事業所の損益計算書(前年比較)を取得する
        /// </remarks>
        /// <param name='companyId'>
        /// 事業所ID
        /// </param>
        /// <param name='fiscalYear'>
        /// 会計年度
        /// </param>
        /// <param name='startMonth'>
        /// 発生月で絞込：開始会計月(mm)
        /// </param>
        /// <param name='endMonth'>
        /// 発生月で絞込：終了会計月(mm)
        /// </param>
        /// <param name='startDate'>
        /// 発生日で絞込：開始日(yyyy-mm-dd)
        /// </param>
        /// <param name='endDate'>
        /// 発生日で絞込：終了日(yyyy-mm-dd)
        /// </param>
        /// <param name='accountItemDisplayType'>
        /// 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include:
        /// 'account_item', 'group'
        /// </param>
        /// <param name='breakdownDisplayType'>
        /// 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item）
        /// ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include:
        /// 'partner', 'item', 'section', 'account_item'
        /// </param>
        /// <param name='partnerId'>
        /// 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
        /// </param>
        /// <param name='partnerCode'>
        /// 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
        /// </param>
        /// <param name='itemId'>
        /// 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
        /// </param>
        /// <param name='sectionId'>
        /// 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
        /// </param>
        /// <param name='adjustment'>
        /// 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include:
        /// 'only', 'without'
        /// </param>
        /// <param name='costAllocation'>
        /// 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only',
        /// 'not_include'
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<TrialPlTwoYearsResponse>> GetTrialPlTwoYearsWithHttpMessagesAsync(int companyId, int? fiscalYear = default(int?), int? startMonth = default(int?), int? endMonth = default(int?), string startDate = default(string), string endDate = default(string), string accountItemDisplayType = default(string), string breakdownDisplayType = default(string), int? partnerId = default(int?), string partnerCode = default(string), int? itemId = default(int?), int? sectionId = default(int?), string adjustment = default(string), string costAllocation = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("companyId", companyId);
                tracingParameters.Add("fiscalYear", fiscalYear);
                tracingParameters.Add("startMonth", startMonth);
                tracingParameters.Add("endMonth", endMonth);
                tracingParameters.Add("startDate", startDate);
                tracingParameters.Add("endDate", endDate);
                tracingParameters.Add("accountItemDisplayType", accountItemDisplayType);
                tracingParameters.Add("breakdownDisplayType", breakdownDisplayType);
                tracingParameters.Add("partnerId", partnerId);
                tracingParameters.Add("partnerCode", partnerCode);
                tracingParameters.Add("itemId", itemId);
                tracingParameters.Add("sectionId", sectionId);
                tracingParameters.Add("adjustment", adjustment);
                tracingParameters.Add("costAllocation", costAllocation);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTrialPlTwoYears", tracingParameters);
            }
            // Construct URL
            var _baseUrl = Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "reports/trial_pl_two_years").ToString();
            List<string> _queryParameters = new List<string>();
            _queryParameters.Add(string.Format("company_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(companyId, Client.SerializationSettings).Trim('"'))));
            if (fiscalYear != null)
            {
                _queryParameters.Add(string.Format("fiscal_year={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(fiscalYear, Client.SerializationSettings).Trim('"'))));
            }
            if (startMonth != null)
            {
                _queryParameters.Add(string.Format("start_month={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(startMonth, Client.SerializationSettings).Trim('"'))));
            }
            if (endMonth != null)
            {
                _queryParameters.Add(string.Format("end_month={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(endMonth, Client.SerializationSettings).Trim('"'))));
            }
            if (startDate != null)
            {
                _queryParameters.Add(string.Format("start_date={0}", System.Uri.EscapeDataString(startDate)));
            }
            if (endDate != null)
            {
                _queryParameters.Add(string.Format("end_date={0}", System.Uri.EscapeDataString(endDate)));
            }
            if (accountItemDisplayType != null)
            {
                _queryParameters.Add(string.Format("account_item_display_type={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(accountItemDisplayType, Client.SerializationSettings).Trim('"'))));
            }
            if (breakdownDisplayType != null)
            {
                _queryParameters.Add(string.Format("breakdown_display_type={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(breakdownDisplayType, Client.SerializationSettings).Trim('"'))));
            }
            if (partnerId != null)
            {
                _queryParameters.Add(string.Format("partner_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(partnerId, Client.SerializationSettings).Trim('"'))));
            }
            if (partnerCode != null)
            {
                _queryParameters.Add(string.Format("partner_code={0}", System.Uri.EscapeDataString(partnerCode)));
            }
            if (itemId != null)
            {
                _queryParameters.Add(string.Format("item_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(itemId, Client.SerializationSettings).Trim('"'))));
            }
            if (sectionId != null)
            {
                _queryParameters.Add(string.Format("section_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(sectionId, Client.SerializationSettings).Trim('"'))));
            }
            if (adjustment != null)
            {
                _queryParameters.Add(string.Format("adjustment={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(adjustment, Client.SerializationSettings).Trim('"'))));
            }
            if (costAllocation != null)
            {
                _queryParameters.Add(string.Format("cost_allocation={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(costAllocation, Client.SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<TrialPlTwoYearsResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<TrialPlTwoYearsResponse>(_responseContent, Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// 損益計算書(３期間比較)の取得
        /// </summary>
        /// <remarks>
        /// 指定した事業所の損益計算書(３期間比較)を取得する
        /// </remarks>
        /// <param name='companyId'>
        /// 事業所ID
        /// </param>
        /// <param name='fiscalYear'>
        /// 会計年度
        /// </param>
        /// <param name='startMonth'>
        /// 発生月で絞込：開始会計月(mm)
        /// </param>
        /// <param name='endMonth'>
        /// 発生月で絞込：終了会計月(mm)
        /// </param>
        /// <param name='startDate'>
        /// 発生日で絞込：開始日(yyyy-mm-dd)
        /// </param>
        /// <param name='endDate'>
        /// 発生日で絞込：終了日(yyyy-mm-dd)
        /// </param>
        /// <param name='accountItemDisplayType'>
        /// 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include:
        /// 'account_item', 'group'
        /// </param>
        /// <param name='breakdownDisplayType'>
        /// 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item）
        /// ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include:
        /// 'partner', 'item', 'section', 'account_item'
        /// </param>
        /// <param name='partnerId'>
        /// 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
        /// </param>
        /// <param name='partnerCode'>
        /// 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
        /// </param>
        /// <param name='itemId'>
        /// 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
        /// </param>
        /// <param name='sectionId'>
        /// 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
        /// </param>
        /// <param name='adjustment'>
        /// 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include:
        /// 'only', 'without'
        /// </param>
        /// <param name='costAllocation'>
        /// 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only',
        /// 'not_include'
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<TrialPlThreeYearsResponse>> GetTrialPlThreeYearsWithHttpMessagesAsync(int companyId, int? fiscalYear = default(int?), int? startMonth = default(int?), int? endMonth = default(int?), string startDate = default(string), string endDate = default(string), string accountItemDisplayType = default(string), string breakdownDisplayType = default(string), int? partnerId = default(int?), string partnerCode = default(string), int? itemId = default(int?), int? sectionId = default(int?), string adjustment = default(string), string costAllocation = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("companyId", companyId);
                tracingParameters.Add("fiscalYear", fiscalYear);
                tracingParameters.Add("startMonth", startMonth);
                tracingParameters.Add("endMonth", endMonth);
                tracingParameters.Add("startDate", startDate);
                tracingParameters.Add("endDate", endDate);
                tracingParameters.Add("accountItemDisplayType", accountItemDisplayType);
                tracingParameters.Add("breakdownDisplayType", breakdownDisplayType);
                tracingParameters.Add("partnerId", partnerId);
                tracingParameters.Add("partnerCode", partnerCode);
                tracingParameters.Add("itemId", itemId);
                tracingParameters.Add("sectionId", sectionId);
                tracingParameters.Add("adjustment", adjustment);
                tracingParameters.Add("costAllocation", costAllocation);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTrialPlThreeYears", tracingParameters);
            }
            // Construct URL
            var _baseUrl = Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "reports/trial_pl_three_years").ToString();
            List<string> _queryParameters = new List<string>();
            _queryParameters.Add(string.Format("company_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(companyId, Client.SerializationSettings).Trim('"'))));
            if (fiscalYear != null)
            {
                _queryParameters.Add(string.Format("fiscal_year={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(fiscalYear, Client.SerializationSettings).Trim('"'))));
            }
            if (startMonth != null)
            {
                _queryParameters.Add(string.Format("start_month={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(startMonth, Client.SerializationSettings).Trim('"'))));
            }
            if (endMonth != null)
            {
                _queryParameters.Add(string.Format("end_month={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(endMonth, Client.SerializationSettings).Trim('"'))));
            }
            if (startDate != null)
            {
                _queryParameters.Add(string.Format("start_date={0}", System.Uri.EscapeDataString(startDate)));
            }
            if (endDate != null)
            {
                _queryParameters.Add(string.Format("end_date={0}", System.Uri.EscapeDataString(endDate)));
            }
            if (accountItemDisplayType != null)
            {
                _queryParameters.Add(string.Format("account_item_display_type={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(accountItemDisplayType, Client.SerializationSettings).Trim('"'))));
            }
            if (breakdownDisplayType != null)
            {
                _queryParameters.Add(string.Format("breakdown_display_type={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(breakdownDisplayType, Client.SerializationSettings).Trim('"'))));
            }
            if (partnerId != null)
            {
                _queryParameters.Add(string.Format("partner_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(partnerId, Client.SerializationSettings).Trim('"'))));
            }
            if (partnerCode != null)
            {
                _queryParameters.Add(string.Format("partner_code={0}", System.Uri.EscapeDataString(partnerCode)));
            }
            if (itemId != null)
            {
                _queryParameters.Add(string.Format("item_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(itemId, Client.SerializationSettings).Trim('"'))));
            }
            if (sectionId != null)
            {
                _queryParameters.Add(string.Format("section_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(sectionId, Client.SerializationSettings).Trim('"'))));
            }
            if (adjustment != null)
            {
                _queryParameters.Add(string.Format("adjustment={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(adjustment, Client.SerializationSettings).Trim('"'))));
            }
            if (costAllocation != null)
            {
                _queryParameters.Add(string.Format("cost_allocation={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(costAllocation, Client.SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<TrialPlThreeYearsResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<TrialPlThreeYearsResponse>(_responseContent, Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// 損益計算書(部門比較)の取得
        /// </summary>
        /// <remarks>
        /// 指定した事業所の損益計算書(部門比較)を取得する
        /// </remarks>
        /// <param name='companyId'>
        /// 事業所ID
        /// </param>
        /// <param name='sectionIds'>
        /// 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください）
        /// </param>
        /// <param name='fiscalYear'>
        /// 会計年度
        /// </param>
        /// <param name='startMonth'>
        /// 発生月で絞込：開始会計月(mm)
        /// </param>
        /// <param name='endMonth'>
        /// 発生月で絞込：終了会計月(mm)
        /// </param>
        /// <param name='startDate'>
        /// 発生日で絞込：開始日(yyyy-mm-dd)
        /// </param>
        /// <param name='endDate'>
        /// 発生日で絞込：終了日(yyyy-mm-dd)
        /// </param>
        /// <param name='accountItemDisplayType'>
        /// 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include:
        /// 'account_item', 'group'
        /// </param>
        /// <param name='breakdownDisplayType'>
        /// 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item）
        /// ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include:
        /// 'partner', 'item', 'section', 'account_item'
        /// </param>
        /// <param name='partnerId'>
        /// 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
        /// </param>
        /// <param name='partnerCode'>
        /// 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
        /// </param>
        /// <param name='itemId'>
        /// 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
        /// </param>
        /// <param name='adjustment'>
        /// 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include:
        /// 'only', 'without'
        /// </param>
        /// <param name='costAllocation'>
        /// 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only',
        /// 'not_include'
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<TrialPlSectionsResponse>> GetTrialPlSectionsWithHttpMessagesAsync(int companyId, string sectionIds, int? fiscalYear = default(int?), int? startMonth = default(int?), int? endMonth = default(int?), string startDate = default(string), string endDate = default(string), string accountItemDisplayType = default(string), string breakdownDisplayType = default(string), int? partnerId = default(int?), string partnerCode = default(string), int? itemId = default(int?), string adjustment = default(string), string costAllocation = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (sectionIds == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "sectionIds");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("companyId", companyId);
                tracingParameters.Add("sectionIds", sectionIds);
                tracingParameters.Add("fiscalYear", fiscalYear);
                tracingParameters.Add("startMonth", startMonth);
                tracingParameters.Add("endMonth", endMonth);
                tracingParameters.Add("startDate", startDate);
                tracingParameters.Add("endDate", endDate);
                tracingParameters.Add("accountItemDisplayType", accountItemDisplayType);
                tracingParameters.Add("breakdownDisplayType", breakdownDisplayType);
                tracingParameters.Add("partnerId", partnerId);
                tracingParameters.Add("partnerCode", partnerCode);
                tracingParameters.Add("itemId", itemId);
                tracingParameters.Add("adjustment", adjustment);
                tracingParameters.Add("costAllocation", costAllocation);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTrialPlSections", tracingParameters);
            }
            // Construct URL
            var _baseUrl = Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "reports/trial_pl_sections").ToString();
            List<string> _queryParameters = new List<string>();
            _queryParameters.Add(string.Format("company_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(companyId, Client.SerializationSettings).Trim('"'))));
            if (sectionIds != null)
            {
                _queryParameters.Add(string.Format("section_ids={0}", System.Uri.EscapeDataString(sectionIds)));
            }
            if (fiscalYear != null)
            {
                _queryParameters.Add(string.Format("fiscal_year={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(fiscalYear, Client.SerializationSettings).Trim('"'))));
            }
            if (startMonth != null)
            {
                _queryParameters.Add(string.Format("start_month={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(startMonth, Client.SerializationSettings).Trim('"'))));
            }
            if (endMonth != null)
            {
                _queryParameters.Add(string.Format("end_month={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(endMonth, Client.SerializationSettings).Trim('"'))));
            }
            if (startDate != null)
            {
                _queryParameters.Add(string.Format("start_date={0}", System.Uri.EscapeDataString(startDate)));
            }
            if (endDate != null)
            {
                _queryParameters.Add(string.Format("end_date={0}", System.Uri.EscapeDataString(endDate)));
            }
            if (accountItemDisplayType != null)
            {
                _queryParameters.Add(string.Format("account_item_display_type={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(accountItemDisplayType, Client.SerializationSettings).Trim('"'))));
            }
            if (breakdownDisplayType != null)
            {
                _queryParameters.Add(string.Format("breakdown_display_type={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(breakdownDisplayType, Client.SerializationSettings).Trim('"'))));
            }
            if (partnerId != null)
            {
                _queryParameters.Add(string.Format("partner_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(partnerId, Client.SerializationSettings).Trim('"'))));
            }
            if (partnerCode != null)
            {
                _queryParameters.Add(string.Format("partner_code={0}", System.Uri.EscapeDataString(partnerCode)));
            }
            if (itemId != null)
            {
                _queryParameters.Add(string.Format("item_id={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(itemId, Client.SerializationSettings).Trim('"'))));
            }
            if (adjustment != null)
            {
                _queryParameters.Add(string.Format("adjustment={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(adjustment, Client.SerializationSettings).Trim('"'))));
            }
            if (costAllocation != null)
            {
                _queryParameters.Add(string.Format("cost_allocation={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(costAllocation, Client.SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<TrialPlSectionsResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<TrialPlSectionsResponse>(_responseContent, Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

    }
}
