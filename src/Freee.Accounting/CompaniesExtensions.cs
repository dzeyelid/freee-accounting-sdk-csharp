// <auto-generated>
// Copyright (c) freee K.K. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license
// information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
//
// </auto-generated>

namespace Freee.Accounting
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Companies.
    /// </summary>
    public static partial class CompaniesExtensions
    {
            /// <summary>
            /// 事業所一覧の取得
            /// </summary>
            /// <remarks>
            /// ユーザが所属する事業所の一覧を取得する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListOKResponse> ListAsync(this ICompanies operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 事業所の詳細情報の取得
            /// </summary>
            /// <remarks>
            /// ユーザが所属する事業所の詳細を取得する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// 事業所ID
            /// </param>
            /// <param name='details'>
            /// 取得情報に勘定科目・税区分コード・税区分・品目・取引先・部門・メモタグ・口座の一覧を含める
            /// </param>
            /// <param name='accountItems'>
            /// 取得情報に勘定科目一覧を含める
            /// </param>
            /// <param name='taxes'>
            /// 取得情報に税区分コード・税区分一覧を含める
            /// </param>
            /// <param name='items'>
            /// 取得情報に品目一覧を含める
            /// </param>
            /// <param name='partners'>
            /// 取得情報に取引先一覧を含める
            /// </param>
            /// <param name='sections'>
            /// 取得情報に部門一覧を含める
            /// </param>
            /// <param name='tags'>
            /// 取得情報にメモタグ一覧を含める
            /// </param>
            /// <param name='walletables'>
            /// 取得情報に口座一覧を含める
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CompaniesShowResponse> GetAsync(this ICompanies operations, int id, bool? details = default(bool?), bool? accountItems = default(bool?), bool? taxes = default(bool?), bool? items = default(bool?), bool? partners = default(bool?), bool? sections = default(bool?), bool? tags = default(bool?), bool? walletables = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(id, details, accountItems, taxes, items, partners, sections, tags, walletables, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 事業所情報の更新
            /// </summary>
            /// <remarks>
            /// ユーザが所属する事業所の情報を更新する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// 事業所ID
            /// </param>
            /// <param name='parameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CompaniesUpdateResponse> UpdateAsync(this ICompanies operations, int id, UpdateCompanyParams parameters = default(UpdateCompanyParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(id, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
