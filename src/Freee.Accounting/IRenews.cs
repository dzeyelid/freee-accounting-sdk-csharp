// <auto-generated>
// Copyright (c) freee K.K. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license
// information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
//
// </auto-generated>

namespace Freee.Accounting
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Renews operations.
    /// </summary>
    public partial interface IRenews
    {
        /// <summary>
        /// 取引（収入／支出）に対する+更新の作成
        /// </summary>
        /// <remarks>
        /// 指定した事業所の取引（収入／支出）の+更新を作成する
        /// </remarks>
        /// <param name='id'>
        /// 取引ID
        /// </param>
        /// <param name='parameters'>
        /// 取引（収入／支出）に対する+更新の情報
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<RenewsResponse>> CreateDealWithHttpMessagesAsync(int id, RenewsCreateParams parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 取引（収入／支出）の+更新の更新
        /// </summary>
        /// <remarks>
        /// 指定した事業所の取引（収入／支出）の+更新を更新する
        /// </remarks>
        /// <param name='id'>
        /// 取引ID
        /// </param>
        /// <param name='renewId'>
        /// +更新ID
        /// </param>
        /// <param name='parameters'>
        /// +更新の更新情報
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<RenewsResponse>> UpdateDealWithHttpMessagesAsync(int id, int renewId, RenewsUpdateParams parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 取引（収入／支出）の+更新の削除
        /// </summary>
        /// <remarks>
        /// 指定した事業所の取引（収入／支出）の+更新を削除する
        /// </remarks>
        /// <param name='id'>
        /// 取引ID
        /// </param>
        /// <param name='renewId'>
        /// +更新ID
        /// </param>
        /// <param name='companyId'>
        /// 事業所ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<RenewsResponse>> DeleteDealWithHttpMessagesAsync(int id, int renewId, int companyId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
