// <auto-generated>
// Copyright (c) freee K.K. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license
// information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
//
// </auto-generated>

namespace Freee.Accounting
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ManualJournals.
    /// </summary>
    public static partial class ManualJournalsExtensions
    {
            /// <summary>
            /// 振替伝票一覧の取得
            /// </summary>
            /// <remarks>
            /// 指定した事業所の振替伝票一覧を取得する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companyId'>
            /// 事業所ID
            /// </param>
            /// <param name='startIssueDate'>
            /// 発生日で絞込：開始日(yyyy-mm-dd)
            /// </param>
            /// <param name='endIssueDate'>
            /// 発生日で絞込：終了日(yyyy-mm-dd)
            /// </param>
            /// <param name='entrySide'>
            /// 貸借で絞込 (貸方: credit, 借方: debit). Possible values include: 'credit', 'debit'
            /// </param>
            /// <param name='accountItemId'>
            /// 勘定科目IDで絞込
            /// </param>
            /// <param name='minAmount'>
            /// 金額で絞込：下限
            /// </param>
            /// <param name='maxAmount'>
            /// 金額で絞込：上限
            /// </param>
            /// <param name='partnerId'>
            /// 取引先IDで絞込（0を指定すると、取引先が未選択の貸借行を絞り込めます）
            /// </param>
            /// <param name='partnerCode'>
            /// 取引先コードで絞込
            /// </param>
            /// <param name='itemId'>
            /// 品目IDで絞込（0を指定すると、品目が未選択の貸借行を絞り込めます）
            /// </param>
            /// <param name='sectionId'>
            /// 部門IDで絞込（0を指定すると、部門が未選択の貸借行を絞り込めます）
            /// </param>
            /// <param name='segment1TagId'>
            /// セグメント１IDで絞り込み（0を指定すると、セグメント１が未選択の貸借行を絞り込めます）
            /// </param>
            /// <param name='segment2TagId'>
            /// セグメント２IDで絞り込み（0を指定すると、セグメント２が未選択の貸借行を絞り込めます）
            /// </param>
            /// <param name='segment3TagId'>
            /// セグメント３IDで絞り込み（0を指定すると、セグメント３が未選択の貸借行を絞り込めます）
            /// </param>
            /// <param name='commentStatus'>
            /// コメント状態で絞込（自分宛のコメント: posted_with_mention, 自分宛のコメント-未解決: raised_with_mention,
            /// 自分宛のコメント-解決済: resolved_with_mention, コメントあり: posted, 未解決: raised, 解決済:
            /// resolved, コメントなし: none）. Possible values include: 'posted_with_mention',
            /// 'raised_with_mention', 'resolved_with_mention', 'posted', 'raised',
            /// 'resolved', 'none'
            /// </param>
            /// <param name='commentImportant'>
            /// 重要コメント付きの振替伝票を絞込
            /// </param>
            /// <param name='adjustment'>
            /// 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include:
            /// 'only', 'without'
            /// </param>
            /// <param name='txnNumber'>
            /// 仕訳番号で絞込（事業所の仕訳番号形式が有効な場合のみ）
            /// </param>
            /// <param name='offset'>
            /// 取得レコードのオフセット (デフォルト: 0)
            /// </param>
            /// <param name='limit'>
            /// 取得レコードの件数 (デフォルト: 20, 最大: 500)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManualJournalsIndexResponse> ListAsync(this IManualJournals operations, int companyId, string startIssueDate = default(string), string endIssueDate = default(string), string entrySide = default(string), int? accountItemId = default(int?), int? minAmount = default(int?), int? maxAmount = default(int?), int? partnerId = default(int?), string partnerCode = default(string), int? itemId = default(int?), int? sectionId = default(int?), int? segment1TagId = default(int?), int? segment2TagId = default(int?), int? segment3TagId = default(int?), string commentStatus = default(string), bool? commentImportant = default(bool?), string adjustment = default(string), string txnNumber = default(string), int? offset = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(companyId, startIssueDate, endIssueDate, entrySide, accountItemId, minAmount, maxAmount, partnerId, partnerCode, itemId, sectionId, segment1TagId, segment2TagId, segment3TagId, commentStatus, commentImportant, adjustment, txnNumber, offset, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 振替伝票の作成
            /// </summary>
            /// <remarks>
            /// 指定した事業所の振替伝票を作成する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// 振替伝票の作成
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManualJournalsCreateResponse> CreateAsync(this IManualJournals operations, ManualJournalsCreateParams parameters = default(ManualJournalsCreateParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 振替伝票の取得
            /// </summary>
            /// <remarks>
            /// 指定した事業所の振替伝票を取得する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companyId'>
            /// 事業所ID
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManualJournalsShowResponse> GetAsync(this IManualJournals operations, int companyId, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(companyId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 振替伝票の更新
            /// </summary>
            /// <remarks>
            /// 指定した事業所の振替伝票を更新する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='parameters'>
            /// 振替伝票の更新
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManualJournalsUpdateResponse> UpdateAsync(this IManualJournals operations, int id, ManualJournalsUpdateParams parameters = default(ManualJournalsUpdateParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(id, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 振替伝票の削除
            /// </summary>
            /// <remarks>
            /// 指定した事業所の振替伝票を削除する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='companyId'>
            /// 事業所ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DestroyAsync(this IManualJournals operations, int id, int companyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DestroyWithHttpMessagesAsync(id, companyId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
