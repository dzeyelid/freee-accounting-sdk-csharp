// <auto-generated>
// Copyright (c) freee K.K. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license
// information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
//
// </auto-generated>

namespace Freee.Accounting
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DealsOperations.
    /// </summary>
    public static partial class DealsOperationsExtensions
    {
            /// <summary>
            /// 取引（収入／支出）一覧の取得
            /// </summary>
            /// <remarks>
            /// 指定した事業所の取引一覧（収入／支出）を取得する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companyId'>
            /// 事業所ID
            /// </param>
            /// <param name='partnerId'>
            /// 取引先IDで絞込
            /// </param>
            /// <param name='accountItemId'>
            /// 勘定科目IDで絞込
            /// </param>
            /// <param name='partnerCode'>
            /// 取引先コードで絞込
            /// </param>
            /// <param name='status'>
            /// 決済状況で絞込 (未決済: unsettled, 完了: settled). Possible values include:
            /// 'unsettled', 'settled'
            /// </param>
            /// <param name='type'>
            /// 収支区分 (収入: income, 支出: expense). Possible values include: 'income',
            /// 'expense'
            /// </param>
            /// <param name='startIssueDate'>
            /// 発生日で絞込：開始日(yyyy-mm-dd)
            /// </param>
            /// <param name='endIssueDate'>
            /// 発生日で絞込：終了日(yyyy-mm-dd)
            /// </param>
            /// <param name='startDueDate'>
            /// 支払期日で絞込：開始日(yyyy-mm-dd)
            /// </param>
            /// <param name='endDueDate'>
            /// 支払期日で絞込：終了日(yyyy-mm-dd)
            /// </param>
            /// <param name='startRenewDate'>
            /// +更新日で絞込：開始日(yyyy-mm-dd)
            /// </param>
            /// <param name='endRenewDate'>
            /// +更新日で絞込：終了日(yyyy-mm-dd)
            /// </param>
            /// <param name='offset'>
            /// 取得レコードのオフセット (デフォルト: 0)
            /// </param>
            /// <param name='limit'>
            /// 取得レコードの件数 (デフォルト: 20, 最大: 100)
            /// </param>
            /// <param name='registeredFrom'>
            /// 取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ）. Possible values include: 'me'
            /// </param>
            /// <param name='accruals'>
            /// 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）. Possible values include:
            /// 'without', 'with'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DealsIndexResponse> ListAsync(this IDealsOperations operations, int companyId, int? partnerId = default(int?), int? accountItemId = default(int?), string partnerCode = default(string), string status = default(string), string type = default(string), string startIssueDate = default(string), string endIssueDate = default(string), string startDueDate = default(string), string endDueDate = default(string), string startRenewDate = default(string), string endRenewDate = default(string), int? offset = default(int?), int? limit = default(int?), string registeredFrom = default(string), string accruals = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(companyId, partnerId, accountItemId, partnerCode, status, type, startIssueDate, endIssueDate, startDueDate, endDueDate, startRenewDate, endRenewDate, offset, limit, registeredFrom, accruals, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 取引（収入／支出）の作成
            /// </summary>
            /// <remarks>
            /// 指定した事業所の取引（収入／支出）を作成する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// 取引（収入／支出）の作成
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DealsCreateResponse> CreateAsync(this IDealsOperations operations, CreateDealParams parameters = default(CreateDealParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 取引（収入／支出）の取得
            /// </summary>
            /// <remarks>
            /// 指定した事業所の取引（収入／支出）を取得する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companyId'>
            /// 事業所ID
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='accruals'>
            /// 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）. Possible values include:
            /// 'without', 'with'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DealsResponse> GetAsync(this IDealsOperations operations, int companyId, int id, string accruals = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(companyId, id, accruals, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 取引（収入／支出）の更新
            /// </summary>
            /// <remarks>
            /// 指定した事業所の取引（収入／支出）を更新する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// 取引ID
            /// </param>
            /// <param name='parameters'>
            /// 取引（収入／支出）の更新
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DealsResponse> UpdateAsync(this IDealsOperations operations, int id, UpdateDealParams parameters = default(UpdateDealParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(id, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
