// <auto-generated>
// Copyright (c) freee K.K. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license
// information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
//
// </auto-generated>

namespace Freee.Accounting.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Invoice
    {
        /// <summary>
        /// Initializes a new instance of the Invoice class.
        /// </summary>
        public Invoice()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Invoice class.
        /// </summary>
        /// <param name="id">請求書ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="issueDate">請求日 (yyyy-mm-dd)</param>
        /// <param name="partnerId">取引先ID</param>
        /// <param name="invoiceNumber">請求書番号</param>
        /// <param name="totalAmount">合計金額</param>
        /// <param name="invoiceStatus">請求書ステータス  (draft: 下書き, applying: 申請中,
        /// remanded: 差し戻し, rejected: 却下, approved: 承認済み, issued: 発行済み).
        /// Possible values include: 'draft', 'applying', 'remanded',
        /// 'rejected', 'approved', 'issued'</param>
        /// <param name="postingStatus">郵送ステータス(unrequested: リクエスト前,
        /// preview_registered: プレビュー登録, preview_failed: プレビュー登録失敗, ordered:
        /// 注文中, order_failed: 注文失敗, printing: 印刷中, canceled: キャンセル, posted:
        /// 投函済み). Possible values include: '', 'unrequested',
        /// 'preview_registered', 'preview_failed', 'ordered', 'order_failed',
        /// 'printing', 'canceled', 'posted'</param>
        /// <param name="companyName">事業所名</param>
        /// <param name="paymentType">支払方法 (振込: transfer, 引き落とし: direct_debit).
        /// Possible values include: '', 'transfer', 'direct_debit'</param>
        /// <param name="invoiceLayout">レイアウト(default_classic: レイアウト１/クラシック,
        /// standard_classic: レイアウト２/クラシック, envelope_classic: 封筒１/クラシック,
        /// carried_forward_standard_classic: レイアウト３（繰越金額欄あり）/クラシック,
        /// carried_forward_envelope_classic: 封筒２（繰越金額欄あり）/クラシック,
        /// default_modern: レイアウト１/モダン, standard_modern: レイアウト２/モダン,
        /// envelope_modern: 封筒/モダン). Possible values include:
        /// 'default_classic', 'standard_classic', 'envelope_classic',
        /// 'carried_forward_standard_classic',
        /// 'carried_forward_envelope_classic', 'default_modern',
        /// 'standard_modern', 'envelope_modern'</param>
        /// <param name="taxEntryMethod">請求書の消費税計算方法(inclusive: 内税, exclusive:
        /// 外税). Possible values include: '', 'inclusive', 'exclusive'</param>
        /// <param name="partnerCode">取引先コード</param>
        /// <param name="title">タイトル</param>
        /// <param name="dueDate">期日 (yyyy-mm-dd)</param>
        /// <param name="totalVat">合計金額</param>
        /// <param name="subTotal">小計</param>
        /// <param name="bookingDate">売上計上日</param>
        /// <param name="description">概要</param>
        /// <param name="paymentStatus">入金ステータス  (unsettled: 入金待ち, settled:
        /// 入金済み). Possible values include: '', 'unsettled', 'settled'</param>
        /// <param name="paymentDate">入金日</param>
        /// <param name="webPublishedAt">Web共有日時(最新)</param>
        /// <param name="webDownloadedAt">Web共有ダウンロード日時(最新)</param>
        /// <param name="webConfirmedAt">Web共有取引先確認日時(最新)</param>
        /// <param name="mailSentAt">メール送信日時(最新)</param>
        /// <param name="partnerName">取引先名</param>
        /// <param name="partnerLongName">取引先正式名称</param>
        /// <param name="partnerTitle">敬称（御中、様、(空白)の3つから選択）. Possible values
        /// include: '御中', '様', '(空白)'</param>
        /// <param name="partnerZipcode">郵便番号</param>
        /// <param
        /// name="partnerPrefectureCode">都道府県コード（0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄</param>
        /// <param name="partnerPrefectureName">都道府県</param>
        /// <param name="partnerAddress1">市区町村・番地</param>
        /// <param name="partnerAddress2">建物名・部屋番号など</param>
        /// <param name="partnerContactInfo">取引先担当者名</param>
        /// <param name="companyZipcode">郵便番号</param>
        /// <param
        /// name="companyPrefectureCode">都道府県コード（0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄</param>
        /// <param name="companyPrefectureName">都道府県</param>
        /// <param name="companyAddress1">市区町村・番地</param>
        /// <param name="companyAddress2">建物名・部屋番号など</param>
        /// <param name="companyContactInfo">事業所担当者名</param>
        /// <param name="paymentBankInfo">支払口座</param>
        /// <param name="message">メッセージ</param>
        /// <param name="notes">備考</param>
        /// <param name="dealId">取引ID
        /// (invoice_statusがissuedの時のみIDが表示されます)</param>
        /// <param name="invoiceContents">請求内容</param>
        public Invoice(int id, int companyId, string issueDate, int? partnerId, string invoiceNumber, int totalAmount, string invoiceStatus, string postingStatus, string companyName, string paymentType, string invoiceLayout, string taxEntryMethod, InvoiceTotalAmountPerVatRate totalAmountPerVatRate, string partnerCode = default(string), string title = default(string), string dueDate = default(string), int? totalVat = default(int?), int? subTotal = default(int?), string bookingDate = default(string), string description = default(string), string paymentStatus = default(string), string paymentDate = default(string), string webPublishedAt = default(string), string webDownloadedAt = default(string), string webConfirmedAt = default(string), string mailSentAt = default(string), string partnerName = default(string), string partnerLongName = default(string), string partnerTitle = default(string), string partnerZipcode = default(string), int? partnerPrefectureCode = default(int?), string partnerPrefectureName = default(string), string partnerAddress1 = default(string), string partnerAddress2 = default(string), string partnerContactInfo = default(string), string companyZipcode = default(string), int? companyPrefectureCode = default(int?), string companyPrefectureName = default(string), string companyAddress1 = default(string), string companyAddress2 = default(string), string companyContactInfo = default(string), string paymentBankInfo = default(string), string message = default(string), string notes = default(string), int? dealId = default(int?), IList<InvoiceInvoiceContentsItem> invoiceContents = default(IList<InvoiceInvoiceContentsItem>))
        {
            Id = id;
            CompanyId = companyId;
            IssueDate = issueDate;
            PartnerId = partnerId;
            PartnerCode = partnerCode;
            InvoiceNumber = invoiceNumber;
            Title = title;
            DueDate = dueDate;
            TotalAmount = totalAmount;
            TotalVat = totalVat;
            SubTotal = subTotal;
            BookingDate = bookingDate;
            Description = description;
            InvoiceStatus = invoiceStatus;
            PaymentStatus = paymentStatus;
            PaymentDate = paymentDate;
            WebPublishedAt = webPublishedAt;
            WebDownloadedAt = webDownloadedAt;
            WebConfirmedAt = webConfirmedAt;
            MailSentAt = mailSentAt;
            PostingStatus = postingStatus;
            PartnerName = partnerName;
            PartnerLongName = partnerLongName;
            PartnerTitle = partnerTitle;
            PartnerZipcode = partnerZipcode;
            PartnerPrefectureCode = partnerPrefectureCode;
            PartnerPrefectureName = partnerPrefectureName;
            PartnerAddress1 = partnerAddress1;
            PartnerAddress2 = partnerAddress2;
            PartnerContactInfo = partnerContactInfo;
            CompanyName = companyName;
            CompanyZipcode = companyZipcode;
            CompanyPrefectureCode = companyPrefectureCode;
            CompanyPrefectureName = companyPrefectureName;
            CompanyAddress1 = companyAddress1;
            CompanyAddress2 = companyAddress2;
            CompanyContactInfo = companyContactInfo;
            PaymentType = paymentType;
            PaymentBankInfo = paymentBankInfo;
            Message = message;
            Notes = notes;
            InvoiceLayout = invoiceLayout;
            TaxEntryMethod = taxEntryMethod;
            DealId = dealId;
            InvoiceContents = invoiceContents;
            TotalAmountPerVatRate = totalAmountPerVatRate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets 請求書ID
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets 事業所ID
        /// </summary>
        [JsonProperty(PropertyName = "company_id")]
        public int CompanyId { get; set; }

        /// <summary>
        /// Gets or sets 請求日 (yyyy-mm-dd)
        /// </summary>
        [JsonProperty(PropertyName = "issue_date")]
        public string IssueDate { get; set; }

        /// <summary>
        /// Gets or sets 取引先ID
        /// </summary>
        [JsonProperty(PropertyName = "partner_id")]
        public int? PartnerId { get; set; }

        /// <summary>
        /// Gets or sets 取引先コード
        /// </summary>
        [JsonProperty(PropertyName = "partner_code")]
        public string PartnerCode { get; set; }

        /// <summary>
        /// Gets or sets 請求書番号
        /// </summary>
        [JsonProperty(PropertyName = "invoice_number")]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or sets タイトル
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets 期日 (yyyy-mm-dd)
        /// </summary>
        [JsonProperty(PropertyName = "due_date")]
        public string DueDate { get; set; }

        /// <summary>
        /// Gets or sets 合計金額
        /// </summary>
        [JsonProperty(PropertyName = "total_amount")]
        public int TotalAmount { get; set; }

        /// <summary>
        /// Gets or sets 合計金額
        /// </summary>
        [JsonProperty(PropertyName = "total_vat")]
        public int? TotalVat { get; set; }

        /// <summary>
        /// Gets or sets 小計
        /// </summary>
        [JsonProperty(PropertyName = "sub_total")]
        public int? SubTotal { get; set; }

        /// <summary>
        /// Gets or sets 売上計上日
        /// </summary>
        [JsonProperty(PropertyName = "booking_date")]
        public string BookingDate { get; set; }

        /// <summary>
        /// Gets or sets 概要
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets 請求書ステータス  (draft: 下書き, applying: 申請中, remanded: 差し戻し,
        /// rejected: 却下, approved: 承認済み, issued: 発行済み). Possible values
        /// include: 'draft', 'applying', 'remanded', 'rejected', 'approved',
        /// 'issued'
        /// </summary>
        [JsonProperty(PropertyName = "invoice_status")]
        public string InvoiceStatus { get; set; }

        /// <summary>
        /// Gets or sets 入金ステータス  (unsettled: 入金待ち, settled: 入金済み). Possible
        /// values include: '', 'unsettled', 'settled'
        /// </summary>
        [JsonProperty(PropertyName = "payment_status")]
        public string PaymentStatus { get; set; }

        /// <summary>
        /// Gets or sets 入金日
        /// </summary>
        [JsonProperty(PropertyName = "payment_date")]
        public string PaymentDate { get; set; }

        /// <summary>
        /// Gets or sets web共有日時(最新)
        /// </summary>
        [JsonProperty(PropertyName = "web_published_at")]
        public string WebPublishedAt { get; set; }

        /// <summary>
        /// Gets or sets web共有ダウンロード日時(最新)
        /// </summary>
        [JsonProperty(PropertyName = "web_downloaded_at")]
        public string WebDownloadedAt { get; set; }

        /// <summary>
        /// Gets or sets web共有取引先確認日時(最新)
        /// </summary>
        [JsonProperty(PropertyName = "web_confirmed_at")]
        public string WebConfirmedAt { get; set; }

        /// <summary>
        /// Gets or sets メール送信日時(最新)
        /// </summary>
        [JsonProperty(PropertyName = "mail_sent_at")]
        public string MailSentAt { get; set; }

        /// <summary>
        /// Gets or sets 郵送ステータス(unrequested: リクエスト前, preview_registered:
        /// プレビュー登録, preview_failed: プレビュー登録失敗, ordered: 注文中, order_failed:
        /// 注文失敗, printing: 印刷中, canceled: キャンセル, posted: 投函済み). Possible
        /// values include: '', 'unrequested', 'preview_registered',
        /// 'preview_failed', 'ordered', 'order_failed', 'printing',
        /// 'canceled', 'posted'
        /// </summary>
        [JsonProperty(PropertyName = "posting_status")]
        public string PostingStatus { get; set; }

        /// <summary>
        /// Gets or sets 取引先名
        /// </summary>
        [JsonProperty(PropertyName = "partner_name")]
        public string PartnerName { get; set; }

        /// <summary>
        /// Gets or sets 取引先正式名称
        /// </summary>
        [JsonProperty(PropertyName = "partner_long_name")]
        public string PartnerLongName { get; set; }

        /// <summary>
        /// Gets or sets 敬称（御中、様、(空白)の3つから選択）. Possible values include: '御中',
        /// '様', '(空白)'
        /// </summary>
        [JsonProperty(PropertyName = "partner_title")]
        public string PartnerTitle { get; set; }

        /// <summary>
        /// Gets or sets 郵便番号
        /// </summary>
        [JsonProperty(PropertyName = "partner_zipcode")]
        public string PartnerZipcode { get; set; }

        /// <summary>
        /// Gets or sets
        /// 都道府県コード（0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄
        /// </summary>
        [JsonProperty(PropertyName = "partner_prefecture_code")]
        public int? PartnerPrefectureCode { get; set; }

        /// <summary>
        /// Gets or sets 都道府県
        /// </summary>
        [JsonProperty(PropertyName = "partner_prefecture_name")]
        public string PartnerPrefectureName { get; set; }

        /// <summary>
        /// Gets or sets 市区町村・番地
        /// </summary>
        [JsonProperty(PropertyName = "partner_address1")]
        public string PartnerAddress1 { get; set; }

        /// <summary>
        /// Gets or sets 建物名・部屋番号など
        /// </summary>
        [JsonProperty(PropertyName = "partner_address2")]
        public string PartnerAddress2 { get; set; }

        /// <summary>
        /// Gets or sets 取引先担当者名
        /// </summary>
        [JsonProperty(PropertyName = "partner_contact_info")]
        public string PartnerContactInfo { get; set; }

        /// <summary>
        /// Gets or sets 事業所名
        /// </summary>
        [JsonProperty(PropertyName = "company_name")]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or sets 郵便番号
        /// </summary>
        [JsonProperty(PropertyName = "company_zipcode")]
        public string CompanyZipcode { get; set; }

        /// <summary>
        /// Gets or sets
        /// 都道府県コード（0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄
        /// </summary>
        [JsonProperty(PropertyName = "company_prefecture_code")]
        public int? CompanyPrefectureCode { get; set; }

        /// <summary>
        /// Gets or sets 都道府県
        /// </summary>
        [JsonProperty(PropertyName = "company_prefecture_name")]
        public string CompanyPrefectureName { get; set; }

        /// <summary>
        /// Gets or sets 市区町村・番地
        /// </summary>
        [JsonProperty(PropertyName = "company_address1")]
        public string CompanyAddress1 { get; set; }

        /// <summary>
        /// Gets or sets 建物名・部屋番号など
        /// </summary>
        [JsonProperty(PropertyName = "company_address2")]
        public string CompanyAddress2 { get; set; }

        /// <summary>
        /// Gets or sets 事業所担当者名
        /// </summary>
        [JsonProperty(PropertyName = "company_contact_info")]
        public string CompanyContactInfo { get; set; }

        /// <summary>
        /// Gets or sets 支払方法 (振込: transfer, 引き落とし: direct_debit). Possible
        /// values include: '', 'transfer', 'direct_debit'
        /// </summary>
        [JsonProperty(PropertyName = "payment_type")]
        public string PaymentType { get; set; }

        /// <summary>
        /// Gets or sets 支払口座
        /// </summary>
        [JsonProperty(PropertyName = "payment_bank_info")]
        public string PaymentBankInfo { get; set; }

        /// <summary>
        /// Gets or sets メッセージ
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or sets 備考
        /// </summary>
        [JsonProperty(PropertyName = "notes")]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or sets レイアウト(default_classic: レイアウト１/クラシック, standard_classic:
        /// レイアウト２/クラシック, envelope_classic: 封筒１/クラシック,
        /// carried_forward_standard_classic: レイアウト３（繰越金額欄あり）/クラシック,
        /// carried_forward_envelope_classic: 封筒２（繰越金額欄あり）/クラシック,
        /// default_modern: レイアウト１/モダン, standard_modern: レイアウト２/モダン,
        /// envelope_modern: 封筒/モダン). Possible values include:
        /// 'default_classic', 'standard_classic', 'envelope_classic',
        /// 'carried_forward_standard_classic',
        /// 'carried_forward_envelope_classic', 'default_modern',
        /// 'standard_modern', 'envelope_modern'
        /// </summary>
        [JsonProperty(PropertyName = "invoice_layout")]
        public string InvoiceLayout { get; set; }

        /// <summary>
        /// Gets or sets 請求書の消費税計算方法(inclusive: 内税, exclusive: 外税). Possible
        /// values include: '', 'inclusive', 'exclusive'
        /// </summary>
        [JsonProperty(PropertyName = "tax_entry_method")]
        public string TaxEntryMethod { get; set; }

        /// <summary>
        /// Gets or sets 取引ID (invoice_statusがissuedの時のみIDが表示されます)
        /// </summary>
        [JsonProperty(PropertyName = "deal_id")]
        public int? DealId { get; set; }

        /// <summary>
        /// Gets or sets 請求内容
        /// </summary>
        [JsonProperty(PropertyName = "invoice_contents")]
        public IList<InvoiceInvoiceContentsItem> InvoiceContents { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "total_amount_per_vat_rate")]
        public InvoiceTotalAmountPerVatRate TotalAmountPerVatRate { get; set; }

    }
}
