// <auto-generated>
// Copyright (c) freee K.K. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license
// information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
//
// </auto-generated>

namespace Freee.Accounting
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Sections.
    /// </summary>
    public static partial class SectionsExtensions
    {
            /// <summary>
            /// 部門一覧の取得
            /// </summary>
            /// <remarks>
            /// 指定した事業所の部門一覧を取得する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companyId'>
            /// 事業所ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SectionsIndexResponse> ListAsync(this ISections operations, int companyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(companyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 部門の作成
            /// </summary>
            /// <remarks>
            /// 指定した事業所の部門を作成する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// 部門の作成
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SectionsCreateResponse> CreateAsync(this ISections operations, SectionParams parameters = default(SectionParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 部門の更新
            /// </summary>
            /// <remarks>
            /// 指定した事業所の部門を更新する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='parameters'>
            /// 部門の更新
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SectionsUpdateResponse> UpdateAsync(this ISections operations, int id, SectionParams parameters = default(SectionParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(id, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 部門の削除
            /// </summary>
            /// <remarks>
            /// 指定した事業所の部門を削除する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='companyId'>
            /// 事業所ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DestroyAsync(this ISections operations, int id, int companyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DestroyWithHttpMessagesAsync(id, companyId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
