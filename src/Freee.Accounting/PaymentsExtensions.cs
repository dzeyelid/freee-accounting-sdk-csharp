// <auto-generated>
// Copyright (c) freee K.K. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license
// information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
//
// </auto-generated>

namespace Freee.Accounting
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Payments.
    /// </summary>
    public static partial class PaymentsExtensions
    {
            /// <summary>
            /// 取引（収入／支出）の支払行作成
            /// </summary>
            /// <remarks>
            /// 指定した事業所の取引（収入／支出）の支払行を作成する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// 取引ID
            /// </param>
            /// <param name='parameters'>
            /// 取引（収入／支出）の支払行作成
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DealsResponse> CreateDealAsync(this IPayments operations, int id, DealPaymentParams parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDealWithHttpMessagesAsync(id, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 取引（収入／支出）の支払行更新
            /// </summary>
            /// <remarks>
            /// 指定した事業所の取引（収入／支出）の支払行を更新する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// 取引ID
            /// </param>
            /// <param name='paymentId'>
            /// 決済ID
            /// </param>
            /// <param name='parameters'>
            /// 取引（収入／支出）の支払行更新
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DealsResponse> UpdateDealAsync(this IPayments operations, int id, int paymentId, DealPaymentParams parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDealWithHttpMessagesAsync(id, paymentId, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 取引（収入／支出）の支払行削除
            /// </summary>
            /// <remarks>
            /// 指定した事業所の取引（収入／支出）の支払行を削除する
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// 取引ID
            /// </param>
            /// <param name='paymentId'>
            /// 決済ID
            /// </param>
            /// <param name='companyId'>
            /// 事業所ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DestroyDealAsync(this IPayments operations, int id, int paymentId, int companyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DestroyDealWithHttpMessagesAsync(id, paymentId, companyId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
